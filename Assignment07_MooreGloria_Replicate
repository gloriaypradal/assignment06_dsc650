{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "female-homework",
   "metadata": {},
   "source": [
    "# Week3. Schemas\n",
    "\n",
    "## Gloria P Moore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "gentle-planet",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import gzip\n",
    "import json\n",
    "from pathlib import Path\n",
    "import csv\n",
    "\n",
    "import pandas as pd\n",
    "import s3fs\n",
    "import pyarrow as pa\n",
    "from pyarrow.json import read_json\n",
    "import pyarrow.parquet as pq\n",
    "import fastavro\n",
    "import pygeohash\n",
    "import snappy\n",
    "import jsonschema\n",
    "from jsonschema.exceptions import ValidationError\n",
    "\n",
    "\n",
    "endpoint_url='https://storage.budsc.midwest-datascience.com'\n",
    "\n",
    "current_dir = Path(os.getcwd()).absolute()\n",
    "schema_dir = current_dir.joinpath('schemas')\n",
    "results_dir = current_dir.joinpath('results')\n",
    "results_dir.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "\n",
    "def read_jsonl_data():\n",
    "    s3 = s3fs.S3FileSystem(\n",
    "        anon=True,\n",
    "        client_kwargs={\n",
    "            'endpoint_url': endpoint_url\n",
    "        }\n",
    "    )\n",
    "    src_data_path = 'data/processed/openflights/routes.jsonl.gz'\n",
    "    with s3.open(src_data_path, 'rb') as f_gz:\n",
    "        with gzip.open(f_gz, 'rb') as f:\n",
    "            records = [json.loads(line) for line in f.readlines()]\n",
    "        \n",
    "\n",
    "    return records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "automatic-spine",
   "metadata": {},
   "outputs": [],
   "source": [
    "records = read_jsonl_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "physical-chester",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_parquet_dataset():\n",
    "    src_data_path = 'data/processed/openflights/routes.jsonl.gz'\n",
    "    parquet_output_path = results_dir.joinpath('routes.parquet')\n",
    "    s3 = s3fs.S3FileSystem(\n",
    "        anon=True,\n",
    "        client_kwargs={\n",
    "            'endpoint_url': endpoint_url\n",
    "        }\n",
    "    )\n",
    "    \n",
    "    with s3.open(src_data_path, 'rb') as f_gz:\n",
    "        with gzip.open(f_gz, 'rb') as f:\n",
    "            pass\n",
    "            df = pd.DataFrame(records)\n",
    "            table = pa.Table.from_pandas(df)\n",
    "            pq.write_table(table,'routes.parquet')\n",
    "\n",
    "create_parquet_dataset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "deadly-carpet",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd. read_parquet('routes.parquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "inner-orientation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>airline</th>\n",
       "      <th>src_airport</th>\n",
       "      <th>dst_airport</th>\n",
       "      <th>codeshare</th>\n",
       "      <th>equipment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'active': True, 'airline_id': 410, 'alias': '...</td>\n",
       "      <td>{'airport_id': 2965.0, 'altitude': 89.0, 'city...</td>\n",
       "      <td>{'airport_id': 2990.0, 'altitude': 411.0, 'cit...</td>\n",
       "      <td>False</td>\n",
       "      <td>[CR2]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'active': True, 'airline_id': 410, 'alias': '...</td>\n",
       "      <td>{'airport_id': 2966.0, 'altitude': -65.0, 'cit...</td>\n",
       "      <td>{'airport_id': 2990.0, 'altitude': 411.0, 'cit...</td>\n",
       "      <td>False</td>\n",
       "      <td>[CR2]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'active': True, 'airline_id': 410, 'alias': '...</td>\n",
       "      <td>{'airport_id': 2966.0, 'altitude': -65.0, 'cit...</td>\n",
       "      <td>{'airport_id': 2962.0, 'altitude': 1054.0, 'ci...</td>\n",
       "      <td>False</td>\n",
       "      <td>[CR2]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'active': True, 'airline_id': 410, 'alias': '...</td>\n",
       "      <td>{'airport_id': 2968.0, 'altitude': 769.0, 'cit...</td>\n",
       "      <td>{'airport_id': 2990.0, 'altitude': 411.0, 'cit...</td>\n",
       "      <td>False</td>\n",
       "      <td>[CR2]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'active': True, 'airline_id': 410, 'alias': '...</td>\n",
       "      <td>{'airport_id': 2968.0, 'altitude': 769.0, 'cit...</td>\n",
       "      <td>{'airport_id': 4078.0, 'altitude': 365.0, 'cit...</td>\n",
       "      <td>False</td>\n",
       "      <td>[CR2]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             airline  \\\n",
       "0  {'active': True, 'airline_id': 410, 'alias': '...   \n",
       "1  {'active': True, 'airline_id': 410, 'alias': '...   \n",
       "2  {'active': True, 'airline_id': 410, 'alias': '...   \n",
       "3  {'active': True, 'airline_id': 410, 'alias': '...   \n",
       "4  {'active': True, 'airline_id': 410, 'alias': '...   \n",
       "\n",
       "                                         src_airport  \\\n",
       "0  {'airport_id': 2965.0, 'altitude': 89.0, 'city...   \n",
       "1  {'airport_id': 2966.0, 'altitude': -65.0, 'cit...   \n",
       "2  {'airport_id': 2966.0, 'altitude': -65.0, 'cit...   \n",
       "3  {'airport_id': 2968.0, 'altitude': 769.0, 'cit...   \n",
       "4  {'airport_id': 2968.0, 'altitude': 769.0, 'cit...   \n",
       "\n",
       "                                         dst_airport  codeshare equipment  \n",
       "0  {'airport_id': 2990.0, 'altitude': 411.0, 'cit...      False     [CR2]  \n",
       "1  {'airport_id': 2990.0, 'altitude': 411.0, 'cit...      False     [CR2]  \n",
       "2  {'airport_id': 2962.0, 'altitude': 1054.0, 'ci...      False     [CR2]  \n",
       "3  {'airport_id': 2990.0, 'altitude': 411.0, 'cit...      False     [CR2]  \n",
       "4  {'airport_id': 4078.0, 'altitude': 365.0, 'cit...      False     [CR2]  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "compact-soundtrack",
   "metadata": {},
   "outputs": [],
   "source": [
    "partitions = (\n",
    "        ('A', 'A'), ('B', 'B'), ('C', 'D'), ('E', 'F'),\n",
    "        ('G', 'H'), ('I', 'J'), ('K', 'L'), ('M', 'M'),\n",
    "        ('N', 'N'), ('O', 'P'), ('Q', 'R'), ('S', 'T'),\n",
    "        ('U', 'U'), ('V', 'V'), ('W', 'X'), ('Y', 'Z')\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "relative-injection",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
